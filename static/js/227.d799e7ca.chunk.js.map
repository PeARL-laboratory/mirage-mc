{"version":3,"file":"static/js/227.d799e7ca.chunk.js","mappings":"0bAoBMA,EAAgB,SAAH,GAAsB,IAAhBC,EAAQ,EAARA,SACfC,GAAOC,EAAAA,EAAAA,KACLC,GAAcC,EAAAA,EAAAA,aAAdD,UACR,GAAuCE,EAAAA,EAAAA,YAA/BC,EAAO,EAAPA,QAASC,EAAU,EAAVA,WAAYC,EAAK,EAALA,MAC7B,EAA+CL,GAAa,CAAC,EAA9CM,EAAW,EAAlBC,MAAoBC,EAAG,EAAHA,IAAKC,EAAS,EAATA,UACjC,EAA+CD,GAAO,CAAC,EAA/CE,EAAe,EAAfA,gBAAiBC,EAAiB,EAAjBA,kBACgB,GAAjBL,GAAe,CAAC,GAAhCM,OAAAA,OAAM,MAAG,GAAE,EACbL,GAAQM,EAAAA,EAAAA,GAAeV,EAASS,EAAQR,EAAYC,GAE1D,OACI,UAACS,EAAA,EAAa,CAACP,MAAOA,EAAM,WACxB,SAACQ,EAAA,GAAW,KACZ,SAAC,EAAAC,kBAAgB,gBAACC,SAAU,GAAOR,GAAS,cACxC,SAAC,IAAe,WACZ,SAAC,IAAuB,WACpB,SAAC,IAAc,WACX,SAAC,IAAoB,UAAEZ,aAKtCa,IACG,SAAC,KACG,QACAQ,cAAe,EACfC,YAAa,EACbC,UAAWtB,EAAKuB,cAAc,CAC1BC,GAAI,mBACJC,eAAgB,uBAEpBC,gBAAiB1B,EAAKuB,cAAc,CAChCC,GAAI,mBACJC,eAAgB,UAEpBE,SAAU3B,EAAKuB,cAAc,CACzBC,GAAI,kBACJC,eACI,8GAERG,qBAAsB5B,EAAKuB,cAAc,CACrCC,GAAI,0BACJC,eAAgB,gCAEpBI,uBAAwB7B,EAAKuB,cAAc,CACvCC,GAAI,gCACJC,eAAgB,kCAEpBK,0BAA0B,GACtBjB,MAKxB,EAEe,SAAS,EAAT,GAAyB,IAAbd,EAAQ,EAARA,SACfG,GAAcC,EAAAA,EAAAA,aAAdD,UAER,OACI,SAAC,WAAc,WACX,SAAC,IAAY,CAACA,UAAWA,EAAU,UAC/B,SAAC,IAAgB,CAACA,UAAWA,EAAU,UACnC,gBACI6B,MAAO,CACHC,QAAS,QACX,UAEF,SAAClC,EAAa,UAAEC,WAMxC,CC1Fe,SAAS,EAAT,GAAyB,IAAbA,EAAQ,EAARA,SACvB,OACQ,SAAC,EAAe,UACXA,GAGjB,C,4FCkBO,SAASkC,EAAUC,GACtB,IAAMC,GAAQC,EAAAA,EAAAA,KAAQF,GAEtB,OADAC,EAAME,QAAU,GACTF,EAAMG,UACjB,CANA,IAtBuB,SAACd,EAAIe,EAAIjC,EAAYC,GACxC,GAAIgC,EACA,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAGE,OAAQD,IAC3B,GAAID,EAAGC,GAAO,KAAMhB,EAAI,CACpB,IAAMkB,EAAUH,EAAGC,GAAW,OACxBG,EAAoB,MAAXD,GAAkBA,aAAmBE,SAAUF,EAAQpC,EAAa,OAAS,SAAkBoC,EACxGG,EAAoB,MAAVF,EAAiBA,EAAOE,QAAU,CAAC,EACnD,OAAOC,EAAAA,EAAAA,IAAY,kBACZH,GAAM,IACTE,SAAQ,kBAAMA,GAAO,IAAEE,KAAMzC,EAAa,OAAS,UACnD0C,UAAWzC,EAAQ,MAAQ,QAEnC,CAIR,OAAOuC,EAAAA,EAAAA,GAAY,CACfD,QAAS,CAAEE,KAAMzC,EAAa,OAAS,SACvC0C,UAAWzC,EAAQ,MAAQ,OAEnC,C","sources":["containers/LayoutContainer/LayoutContainer_replace.js","containers/LayoutContainer/LayoutContainer.js","containers/LayoutContainer/theme.js"],"sourcesContent":["import { useConfig } from 'base-shell/lib/providers/Config'\r\nimport { CssBaseline } from '@mui/material'\r\nimport PWAPrompt from 'react-ios-pwa-prompt'\r\nimport React from 'react'\r\nimport { useTheme } from 'material-ui-shell/lib/providers/Theme'\r\nimport UpdateContainer from 'material-ui-shell/lib/containers/UpdateContainer/UpdateContainer'\r\nimport QuestionDialogsProvider from 'material-ui-shell/lib/providers/Dialogs/Question/Provider'\r\nimport getThemeSource from './theme'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { ThemeProvider } from '@mui/material/styles'\r\nimport { useIntl } from 'react-intl'\r\nimport FilterProvider from 'material-ui-shell/lib/providers/Filter/Provider'\r\nimport VirtualListsProvider from 'material-ui-shell/lib/providers/VirtualLists/Provider'\r\nimport MenuProvider from 'material-ui-shell/lib/providers/Menu/Provider'\r\nimport AppThemeProvider from 'material-ui-shell/lib/providers/Theme/Provider'\r\nimport '@fontsource/roboto/300.css'\r\nimport '@fontsource/roboto/400.css'\r\nimport '@fontsource/roboto/500.css'\r\nimport '@fontsource/roboto/700.css'\r\n\r\nconst LayoutContent = ({ children }) => {\r\n    const intl = useIntl()\r\n    const { appConfig } = useConfig()\r\n    const { themeID, isDarkMode, isRTL } = useTheme()\r\n    const { theme: themeConfig, pwa, notistack } = appConfig || {}\r\n    const { useiOSPWAPrompt, iOSPWAPromptProps } = pwa || {}\r\n    const { themes = [] } = themeConfig || {}\r\n    const theme = getThemeSource(themeID, themes, isDarkMode, isRTL)\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <SnackbarProvider maxSnack={3} {...notistack}>\r\n                <UpdateContainer>\r\n                    <QuestionDialogsProvider>\r\n                        <FilterProvider>\r\n                            <VirtualListsProvider>{children}</VirtualListsProvider>\r\n                        </FilterProvider>\r\n                    </QuestionDialogsProvider>\r\n                </UpdateContainer>\r\n            </SnackbarProvider>\r\n            {useiOSPWAPrompt && (\r\n                <PWAPrompt\r\n                    //debug={true}\r\n                    promptOnVisit={1}\r\n                    timesToShow={3}\r\n                    copyTitle={intl.formatMessage({\r\n                        id: 'ios_prompt_title',\r\n                        defaultMessage: 'Add to Home Screen',\r\n                    })}\r\n                    copyClosePrompt={intl.formatMessage({\r\n                        id: 'ios_prompt_close',\r\n                        defaultMessage: 'Close',\r\n                    })}\r\n                    copyBody={intl.formatMessage({\r\n                        id: 'ios_prompt_body',\r\n                        defaultMessage:\r\n                            'This website has app functionality. Add it to your home screen to use it in fullscreen and while offline.',\r\n                    })}\r\n                    copyShareButtonLabel={intl.formatMessage({\r\n                        id: 'ios_prompt_share_button',\r\n                        defaultMessage: \"1) Press the 'Share' button\",\r\n                    })}\r\n                    copyAddHomeButtonLabel={intl.formatMessage({\r\n                        id: 'ios_prompt_add_to_home_button',\r\n                        defaultMessage: \"2) Press 'Add to Home Screen'\",\r\n                    })}\r\n                    permanentlyHideOnDismiss={false}\r\n                    {...iOSPWAPromptProps}\r\n                />\r\n            )}\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default function ({ children }) {\r\n    const { appConfig } = useConfig()\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MenuProvider appConfig={appConfig}>\r\n                <AppThemeProvider appConfig={appConfig}>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                        }}\r\n                    >\r\n                        <LayoutContent>{children}</LayoutContent>\r\n                    </div>\r\n                </AppThemeProvider>\r\n            </MenuProvider>\r\n        </React.Fragment>\r\n    )\r\n}","import React,{useEffect} from 'react'\r\nimport LayoutContainer from './LayoutContainer_replace'//'material-ui-shell/lib/containers/LayoutContainer/LayoutContainer';\r\n\r\nexport default function ({ children }) {\r\n    return (\r\n            <LayoutContainer>\r\n                {children}\r\n            </LayoutContainer>\r\n    )\r\n}","import { createTheme } from '@mui/material/styles'\r\nimport {color as d3color} from \"d3\";\r\n\r\nconst getThemeSource = (id, ts, isDarkMode, isRTL) => {\r\n    if (ts) {\r\n        for (let i = 0; i < ts.length; i++) {\r\n            if (ts[i]['id'] === id) {\r\n                const _source = ts[i]['source']\r\n                const source = _source != null ?(_source instanceof Function ?_source(isDarkMode ? 'dark' : 'light'):_source):_source;\r\n                const palette = source != null ? source.palette : {}\r\n                return createTheme({\r\n                    ...source,\r\n                    palette: { ...palette, mode: isDarkMode ? 'dark' : 'light' },\r\n                    direction: isRTL ? 'rtl' : 'ltr',\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return createTheme({\r\n        palette: { mode: isDarkMode ? 'dark' : 'light' },\r\n        direction: isRTL ? 'rtl' : 'ltr',\r\n    })\r\n}\r\n\r\nexport default getThemeSource;\r\n\r\nexport function semicolor(_color){\r\n    const color = d3color(_color);\r\n    color.opacity = 0.5\r\n    return color.toString();\r\n}"],"names":["LayoutContent","children","intl","useIntl","appConfig","useConfig","useTheme","themeID","isDarkMode","isRTL","themeConfig","theme","pwa","notistack","useiOSPWAPrompt","iOSPWAPromptProps","themes","getThemeSource","ThemeProvider","CssBaseline","SnackbarProvider","maxSnack","promptOnVisit","timesToShow","copyTitle","formatMessage","id","defaultMessage","copyClosePrompt","copyBody","copyShareButtonLabel","copyAddHomeButtonLabel","permanentlyHideOnDismiss","style","display","semicolor","_color","color","d3color","opacity","toString","ts","i","length","_source","source","Function","palette","createTheme","mode","direction"],"sourceRoot":""}