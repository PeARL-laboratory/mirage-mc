{"version":3,"file":"static/js/743.1cce034c.chunk.js","mappings":"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","sources":["components/Dialog/index.js","pages/About/index.js","containers/LayoutContainer/LayoutContainer_replace.js","containers/LayoutContainer/LayoutContainer.js","containers/LayoutContainer/theme.js"],"sourcesContent":["import React from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { useTheme } from '@mui/material/styles'\r\n\r\nimport {\r\n    Button,\r\n    Dialog,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    DialogTitle, IconButton,\r\n    Slide,\r\n    useMediaQuery,\r\n} from '@mui/material'\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst Transition = React.forwardRef((props, ref) => (\r\n    <Slide direction=\"up\" {...props} ref={ref} />\r\n))\r\n\r\nfunction BootstrapDialogTitle(props) {\r\n    const { children, onClose, ...other } = props;\r\n\r\n    return (\r\n        <DialogTitle sx={{ m: 0, p: 2 }} {...other}>\r\n            {children}\r\n            {onClose ? (\r\n                <IconButton\r\n                    aria-label=\"close\"\r\n                    onClick={onClose}\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 8,\r\n                        color: (theme) => theme.palette.grey[500],\r\n                    }}\r\n                >\r\n                    <CloseIcon />\r\n                </IconButton>\r\n            ) : null}\r\n        </DialogTitle>\r\n    );\r\n}\r\n\r\nconst QuestionDialog = ({\r\n                            isProcessing = false,\r\n                            isOpen = false,\r\n                            id = '',\r\n                            message = '',\r\n                            title = '',\r\n                            action = '',\r\n                            haveButton=false,\r\n                            handleAction = () => {},\r\n                            handleClose = () => {},\r\n                            ...rest\r\n                        }) => {\r\n    const intl = useIntl()\r\n    const theme = useTheme()\r\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'))\r\n\r\n    return (\r\n        <Dialog\r\n            fullScreen={fullScreen}\r\n            open={isOpen}\r\n            onClose={handleClose}\r\n            TransitionComponent={Transition}\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n            {...rest}\r\n        >\r\n            {/*<DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>*/}\r\n            <BootstrapDialogTitle id=\"alert-dialog-title\" onClose={handleClose}>\r\n                {title}\r\n            </BootstrapDialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {message}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            {haveButton&&<DialogActions>\r\n                <Button onClick={handleClose} color=\"primary\">\r\n                    {intl.formatMessage({id: 'cancel', defaultMessage: 'Cancel'})}\r\n                </Button>\r\n                <Button\r\n                    disabled={isProcessing}\r\n                    onClick={() => {\r\n                        handleAction(handleClose)\r\n                    }}\r\n                    color=\"secondary\"\r\n                >\r\n                    {action}\r\n                </Button>\r\n            </DialogActions>}\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nexport default QuestionDialog","import React, { useState, Fragment } from 'react'\r\nimport QuestionDialog from '../../components/Dialog'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {SET_MENU} from \"../../reducer/actions/setting\";\r\n\r\n\r\nconst AboutDialog = ({ children }) => {\r\n    const dispatch = useDispatch();\r\n    const dialogOpen = useSelector((state) => state.customization.opened);\r\n    const [isProcessing, setIsProcessing] = useState(false)\r\n\r\n    const closeDialog = () => {\r\n        dispatch({ type: SET_MENU, opened: !dialogOpen });\r\n    }\r\n    // console.log('I am CCCCCCCCC')\r\n    return (\r\n        <Fragment>\r\n            {children}\r\n            <QuestionDialog\r\n                isOpen={dialogOpen}\r\n                handleClose={closeDialog}\r\n                isProcessing={isProcessing}\r\n                title={'About us'}\r\n                message={'Welcome to MIRAGE-mc project'}\r\n            />\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AboutDialog","import { useConfig } from 'base-shell/lib/providers/Config'\r\nimport { CssBaseline } from '@mui/material'\r\nimport PWAPrompt from 'react-ios-pwa-prompt'\r\nimport React from 'react'\r\nimport { useTheme } from 'material-ui-shell/lib/providers/Theme'\r\nimport UpdateContainer from 'material-ui-shell/lib/containers/UpdateContainer/UpdateContainer'\r\nimport QuestionDialogsProvider from 'material-ui-shell/lib/providers/Dialogs/Question/Provider'\r\nimport getThemeSource from './theme'\r\nimport { SnackbarProvider } from 'notistack'\r\nimport { ThemeProvider } from '@mui/material/styles'\r\nimport { useIntl } from 'react-intl'\r\nimport FilterProvider from 'material-ui-shell/lib/providers/Filter/Provider'\r\nimport VirtualListsProvider from 'material-ui-shell/lib/providers/VirtualLists/Provider'\r\nimport MenuProvider from 'material-ui-shell/lib/providers/Menu/Provider'\r\nimport AppThemeProvider from 'material-ui-shell/lib/providers/Theme/Provider'\r\nimport '@fontsource/roboto/300.css'\r\nimport '@fontsource/roboto/400.css'\r\nimport '@fontsource/roboto/500.css'\r\nimport '@fontsource/roboto/700.css'\r\nimport AboutDialog from \"../../pages/About\";\r\n\r\n\r\nconst LayoutContent = ({ children }) => {\r\n    const intl = useIntl()\r\n    const { appConfig } = useConfig()\r\n    const { themeID, isDarkMode, isRTL } = useTheme()\r\n    const { theme: themeConfig, pwa, notistack } = appConfig || {}\r\n    const { useiOSPWAPrompt, iOSPWAPromptProps } = pwa || {}\r\n    const { themes = [] } = themeConfig || {}\r\n    const theme = getThemeSource(themeID, themes, isDarkMode, isRTL)\r\n\r\n    return (\r\n        <ThemeProvider theme={theme}>\r\n            <CssBaseline />\r\n            <SnackbarProvider maxSnack={3} {...notistack}>\r\n                <UpdateContainer>\r\n                    <QuestionDialogsProvider>\r\n                        <FilterProvider>\r\n                            <VirtualListsProvider>{children}</VirtualListsProvider>\r\n                            <AboutDialog/>\r\n                        </FilterProvider>\r\n                    </QuestionDialogsProvider>\r\n                </UpdateContainer>\r\n            </SnackbarProvider>\r\n            {useiOSPWAPrompt && (\r\n                <PWAPrompt\r\n                    //debug={true}\r\n                    promptOnVisit={1}\r\n                    timesToShow={3}\r\n                    copyTitle={intl.formatMessage({\r\n                        id: 'ios_prompt_title',\r\n                        defaultMessage: 'Add to Home Screen',\r\n                    })}\r\n                    copyClosePrompt={intl.formatMessage({\r\n                        id: 'ios_prompt_close',\r\n                        defaultMessage: 'Close',\r\n                    })}\r\n                    copyBody={intl.formatMessage({\r\n                        id: 'ios_prompt_body',\r\n                        defaultMessage:\r\n                            'This website has app functionality. Add it to your home screen to use it in fullscreen and while offline.',\r\n                    })}\r\n                    copyShareButtonLabel={intl.formatMessage({\r\n                        id: 'ios_prompt_share_button',\r\n                        defaultMessage: \"1) Press the 'Share' button\",\r\n                    })}\r\n                    copyAddHomeButtonLabel={intl.formatMessage({\r\n                        id: 'ios_prompt_add_to_home_button',\r\n                        defaultMessage: \"2) Press 'Add to Home Screen'\",\r\n                    })}\r\n                    permanentlyHideOnDismiss={false}\r\n                    {...iOSPWAPromptProps}\r\n                />\r\n            )}\r\n        </ThemeProvider>\r\n    )\r\n}\r\n\r\nexport default function ({ children }) {\r\n    const { appConfig } = useConfig()\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <MenuProvider appConfig={appConfig}>\r\n                <AppThemeProvider appConfig={appConfig}>\r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                        }}\r\n                    >\r\n                        <LayoutContent>{children}</LayoutContent>\r\n                    </div>\r\n                </AppThemeProvider>\r\n            </MenuProvider>\r\n        </React.Fragment>\r\n    )\r\n}","import React,{useEffect} from 'react'\r\nimport LayoutContainer from './LayoutContainer_replace'//'material-ui-shell/lib/containers/LayoutContainer/LayoutContainer';\r\n\r\nexport default function ({ children }) {\r\n    return (\r\n            <LayoutContainer>\r\n                {children}\r\n            </LayoutContainer>\r\n    )\r\n}","import { createTheme } from '@mui/material/styles'\r\nimport {color as d3color} from \"d3\";\r\n\r\nconst getThemeSource = (id, ts, isDarkMode, isRTL) => {\r\n    if (ts) {\r\n        for (let i = 0; i < ts.length; i++) {\r\n            if (ts[i]['id'] === id) {\r\n                const _source = ts[i]['source']\r\n                const source = _source != null ?(_source instanceof Function ?_source(isDarkMode ? 'dark' : 'light'):_source):_source;\r\n                const palette = source != null ? source.palette : {}\r\n                return createTheme({\r\n                    ...source,\r\n                    palette: { ...palette, mode: isDarkMode ? 'dark' : 'light' },\r\n                    direction: isRTL ? 'rtl' : 'ltr',\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    return createTheme({\r\n        palette: { mode: isDarkMode ? 'dark' : 'light' },\r\n        direction: isRTL ? 'rtl' : 'ltr',\r\n    })\r\n}\r\n\r\nexport default getThemeSource;\r\n\r\nexport function semicolor(_color){\r\n    const color = d3color(_color);\r\n    color.opacity = 0.5\r\n    return color.toString();\r\n}"],"names":["Transition","React","props","ref","Slide","direction","BootstrapDialogTitle","children","onClose","other","DialogTitle","sx","m","p","IconButton","onClick","position","right","top","color","theme","palette","grey","Close","isProcessing","isOpen","id","message","title","action","haveButton","handleAction","handleClose","rest","intl","useIntl","useTheme","fullScreen","useMediaQuery","breakpoints","down","Dialog","open","TransitionComponent","DialogContent","DialogContentText","DialogActions","Button","formatMessage","defaultMessage","disabled","dispatch","useDispatch","dialogOpen","useSelector","state","customization","opened","useState","Fragment","type","SET_MENU","LayoutContent","appConfig","useConfig","themeID","isDarkMode","isRTL","themeConfig","pwa","notistack","useiOSPWAPrompt","iOSPWAPromptProps","themes","getThemeSource","ThemeProvider","CssBaseline","SnackbarProvider","maxSnack","About","promptOnVisit","timesToShow","copyTitle","copyClosePrompt","copyBody","copyShareButtonLabel","copyAddHomeButtonLabel","permanentlyHideOnDismiss","style","display","semicolor","_color","d3color","opacity","toString","ts","i","length","_source","source","Function","createTheme","mode"],"sourceRoot":""}