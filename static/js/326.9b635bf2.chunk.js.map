{"version":3,"file":"static/js/326.9b635bf2.chunk.js","mappings":"mKAAO,IAAMA,EAAS,CAClB,CACIC,YAAa,OACbC,OAAQ,QAEZ,CACID,YAAa,UACbC,OAAQ,WAEZ,CACID,YAAa,UACbC,OAAQ,WAEZ,CACID,YAAa,gBACbC,OAAQ,iBAEZ,CACID,YAAa,gBACbC,OAAQ,UAEZ,CACID,YAAa,cACbC,OAAQ,QAEZ,CACID,YAAa,eACbC,OAAQ,OACRC,KAAK,OACLC,eAAc,IAITC,EAAeL,EAAOM,QAAO,SAAAC,GAAC,OAAGA,EAAEH,aAAa,G,8gBCQ7D,EAtCyBI,EAAAA,YAAiB,SACtCC,EACAC,GAEA,IAAQC,EAA6BF,EAA7BE,SAAUC,EAAmBH,EAAnBG,KAASC,GAAK,OAAKJ,EAAK,GAIpCK,EAAYC,MAAMC,QAAQL,GAAYA,EAASM,OAAS,EACxDC,GAAaC,EAAAA,EAAAA,QAAO,MAC1B,OACI,gBAAKT,IAAKA,EAAKE,KAAMA,EAAK,UACtB,kCAASC,GAAK,IAAEH,IAAKQ,EAAW,UACxB,SAAC,EAAAE,aAAY,CACTC,YAAaH,EACbI,MAAOX,EACPY,MAAOT,EAAU,SAXzB,SAAH,GAA2B,IAAtBL,EAAK,EAALA,MAAWe,EAAI,EAATrB,KAChB,OAAO,mBAACqB,GAAI,kBAAKf,GAAK,IAAEgB,IAAKhB,EAAMiB,KACvC,QA6BJ,ICzBMC,GAAuBC,EAAAA,EAAAA,KAEvBC,EAAoB,SAACC,EAASC,GAChC,OAAOJ,EAAqBG,EAASC,GAAOC,MAAM,EAJhC,GAKtB,EAEe,SAASC,IACpB,IAAMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MACjB,GAAyCC,EAAAA,EAAAA,UAAS,CAAC,GAAE,eAA9CC,EAAa,KAACC,EAAgB,KACrC,GAAqCC,EAAAA,EAAAA,MAA9BC,EAAS,EAATA,UAAUC,EAAgB,EAAhBA,iBAuBjB,OAZAC,EAAAA,EAAAA,YAAU,WACN,IAAMF,EAAU,aAAYA,EAAU,aACtC,CACIG,QAAQC,IAAI,QACZ,IAAMC,EAAa,CAAC,EACpB3C,EAAAA,EAAAA,SAAqB,SAAAE,GACjByC,EAAWzC,EAAEN,aAAe2C,EAAiBrC,EAAEN,YACnD,IACAwC,EAAiBO,EACrB,CACJ,GAAE,CAACL,EAAU,WAAWA,EAAU,gBAE3B,SAACM,EAAA,EAAK,CAACC,QAAS,EAAGC,QAAS,EAAE,SAChC9C,EAAAA,EAAAA,KAAiB,SAAAE,GAAC,eAAE,SAAC6C,EAAA,EAAY,CAE9BC,UAAQ,EACRC,KAAK,QACLC,UAAW,EACXf,cAAeX,EACf2B,iBAAkBA,EAClB1B,QAAqC,QAA9B,EAAEU,EAAcjC,EAAEN,oBAAY,QAAE,GAEvCwD,MAA6B,QAAxB,EAAEvB,EAAQ3B,EAAEN,oBAAY,QAAE,GAC/ByD,aAAc,KACdC,SAAU,SAACC,EAAOH,GACdpB,GAASwB,EAAAA,EAAAA,IAAU,CAACpC,IAAIlB,EAAEN,YAAYwD,MAAAA,IAC1C,EACAK,YAAa,SAACC,GAAM,OAChB,SAACC,EAAA,GAAS,kBACFD,GAAM,IACVE,MAAO1D,EAAEL,SACX,GAjBDK,EAAEN,YAmBT,KAEV,CCvCA,IA+IA,EA/IqB,SAACQ,GACpB,IACEyD,EAOEzD,EAPFyD,KACAC,EAME1D,EANF0D,aACAC,EAKE3D,EALF2D,OACAC,EAIE5D,EAJF4D,YACAC,EAGE7D,EAHF6D,aACAC,EAEE9D,EAFF8D,YACMC,EACJ/D,EADFgE,KAGMC,EACNL,EADMK,WAAYC,EAClBN,EADkBM,UAA2BC,GAC7CP,EAD6BQ,eAC7BR,EAD6CO,wBAEvCE,EAAgDR,EAAhDQ,QAASC,EAAuCT,EAAvCS,WAAYC,EAA2BV,EAA3BU,MAAOC,EAAoBX,EAApBW,gBAE5BR,EAAkBD,EAAlBC,KACAS,GADkBV,EAAZW,QAC+CZ,EAArDW,kBAAkBE,EAAmCb,EAAnCa,eAAgBC,EAAmBd,EAAnBc,eAEpCC,EAAcC,EAAAA,EAAAA,KAAe,SAACC,GAClC,MAAO,CACL/B,WAAOgC,EACPC,SAAS,EACTC,YAAazB,EAAK0B,cAAc,CAAElE,GAAI8D,EAAEpB,SACxCyB,QAAS,WACP1B,EAAaqB,EAAEpB,OACjB,EACA0B,UAAU,SAACC,EAAA,EAAY,IAE3B,IAEMC,EAAevB,EAAKwB,gBAEpBC,EAAaC,EAAAA,EAAAA,KAAc,SAACC,GAChC,MAAO,CACL3C,WAAOgC,EACPC,SAAS,EACTC,YAAazB,EAAK0B,cAAc,CAAElE,GAAI0E,EAAE1E,KACxCmE,QAAS,WACPd,EAAWqB,EAAE1E,GACf,EACAoE,UAAU,SAACO,EAAA,EAAS,CAACC,MAAO,CAAEC,MAAOH,EAAEG,SAE3C,IAcA,MAAO,CACL,CACE9C,MAAO,KACPoC,QAAS,WACPR,EAAemB,QACjB,EACAb,YAAazB,EAAK0B,cAAc,CAC9BlE,GAAI,SACJ+E,eAAgB,WAElBX,UAAU,SAACY,EAAA,EAAS,IACpBC,0BAA0B,EAC1BC,YAAa,CACX,CACEjB,aAAa,SAAC1D,EAAW,OAI/B,CACEwB,MAAO,IACPiC,QAASM,EACTL,YAAazB,EAAK0B,cAAc,CAAElE,GAAI,SACtCoE,UAAU,SAACe,EAAA,EAAQ,KAErB,CACEpD,MAAO,SACPiC,SAAS,EACTC,YAAazB,EAAK0B,cAAc,CAAElE,GAAI,UACtCoE,UAAU,SAACgB,EAAA,EAAY,KAEzB,CAAEC,SAAS,GACX,CACEpB,YAAazB,EAAK0B,cAAc,CAAElE,GAAI,aACtCiF,0BAA0B,EAC1Bb,UAAU,SAAC,IAAY,IACvBc,YAAa,CACX,CACEjB,YAAazB,EAAK0B,cAAc,CAAElE,GAAI,UACtCsF,cAAe9C,EAAK0B,cAAc,CAAElE,GAAIoD,IACxC6B,0BAA0B,EAC1Bb,UAAU,SAACO,EAAA,EAAS,IACpBO,YAAaV,GAEf,CACEP,YAAazB,EAAK0B,cAAc,CAAElE,GAAI,aACtCsF,cAAe9C,EAAK0B,cAAc,CAAElE,GAAI0C,IACxCuC,0BAA0B,EAC1Bb,UAAU,SAACC,EAAA,EAAY,IACvBa,YAAatB,GAEf,CACEI,UAASf,EACTkB,QAAS,WACPnB,EAAW,yBACb,EACAiB,YAAazB,EAAK0B,cAAc,CAC9BlE,GAAI,mBAENoE,SAAUlB,GACR,SAACqC,EAAA,EAAY,KAEb,SAACC,EAAA,EAAgB,KAGrB,CACErB,QAAS,WACPZ,EAAgB,QAClB,EACAU,YAAY,GAAD,OAAKX,EAAQ,MAAQ,MAAK,SACrCc,SAAUd,GAAQ,SAAC,IAAO,KAAM,SAAC,IAAO,OAI9C,CACEvB,MAAO,KACPiC,QAASR,IAAqBE,EAC9BS,QAAS,WACPR,EAAemB,QACjB,EACAb,YAAazB,EAAK0B,cAAc,CAC9BlE,GAAI,UACJ+E,eAAgB,YAElBX,UAAU,SAACqB,EAAA,EAAM,KAGvB,ECnGA,EA5Da,SAAC1G,GACZ,IAAMyD,GAAOkD,EAAAA,EAAAA,KACPC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACX/C,GAAOgD,EAAAA,EAAAA,MACPpD,GAAcqD,EAAAA,EAAAA,WACdnD,GAAcoD,EAAAA,EAAAA,MACpB,EAA2DtD,GAAe,CAAC,EAAnEK,EAAU,EAAVA,WAAYkD,EAAU,EAAVA,WAAYhD,EAAsB,EAAtBA,uBACxBiD,GAAcC,EAAAA,EAAAA,aAAdD,UACR,GAAqCE,EAAAA,EAAAA,aAA7BC,EAAS,EAATA,UAAU,EAAD,EAAE5D,OAAAA,OAAM,MAAG,KAAI,EAC1BE,GAAe2D,EAAAA,EAAAA,YAEfC,EAAYC,GAAa,QAC7BjE,KAAAA,EACAE,OAAAA,EACAD,aAAc6D,EACd3D,YAAAA,EACAC,aAAAA,EACAuD,UAAAA,EACAtD,YAAAA,EACAE,KAAAA,GACGhE,IACFH,QAAO,SAAC8H,GACT,OAAwB,IAAjBA,EAAK1C,OACd,IAEM2C,EAAQd,EAAWA,EAASe,SAAW,IAW7C,OACE,gBACEhC,MAAO,CACLiC,QAAS,OACTC,cAAe,SACfC,OAAQ,QAER,UAEF,SAAC,IAAS,CAACnC,MAAO,CAAEoC,KAAM,GAAI,UAE5B,SAAC,IAAkB,CAEjBC,cAtBa,SAAC/E,EAAOyE,QACb5C,IAAV4C,GACF3D,EAAW,oBAAoB,QAEnBe,IAAV4C,GAAuBA,IAAUO,OAAOP,IAC1ChB,EAASgB,EAEb,EAgBQQ,YAAajB,EACbtG,MAAO4G,EACPG,MAAOA,GAJFzD,EAAyBN,EAAaU,UASrD,C","sources":["components/EventTable/fields.js","components/ListboxComponent/index.js","components/FilterPanel/index.js","config/menuItems.js","components/Menu/MenuContent.js"],"sourcesContent":["export const fields = [\r\n    {\r\n        accessorKey: 'city',\r\n        header: 'City',\r\n    },\r\n    {\r\n        accessorKey: 'country',\r\n        header: 'Country',\r\n    },\r\n    {\r\n        accessorKey: 'station',\r\n        header: 'Station',\r\n    },\r\n    {\r\n        accessorKey: 'station_genre',\r\n        header: 'Station Genre',\r\n    },\r\n    {\r\n        accessorKey: 'stream_artist',\r\n        header: 'Artist',\r\n    },\r\n    {\r\n        accessorKey: 'stream_song',\r\n        header: 'Song',\r\n    },\r\n    {\r\n        accessorKey: 'time_station',\r\n        header: 'Time',\r\n        type:'time',\r\n        filterDisable:true\r\n    }\r\n];\r\n\r\nexport const filterSearch = fields.filter(f=>!f.filterDisable);","import React, {useRef} from \"react\";\r\nimport { ViewportList } from 'react-viewport-list';\r\n\r\nconst ListboxComponent = React.forwardRef(function ListboxComponent(\r\n    props,\r\n    ref\r\n) {\r\n    const { children, role, ...other } = props;\r\n    const Row = ({props,type:Type}) => {\r\n        return <Type {...props} key={props.id}/>\r\n    }\r\n    const itemCount = Array.isArray(children) ? children.length : 0;\r\n    const viewboxRef = useRef(null)\r\n    return (\r\n        <div ref={ref} role={role} >\r\n            <div {...other} ref={viewboxRef}>\r\n                    <ViewportList\r\n                        viewportRef={viewboxRef}\r\n                        items={children}\r\n                        count={itemCount}\r\n                    >\r\n                        {Row}\r\n                    </ViewportList>\r\n                {/*<List*/}\r\n                {/*    height={250}*/}\r\n                {/*    width={300}*/}\r\n                {/*    rowHeight={itemSize}*/}\r\n                {/*    overscanCount={5}*/}\r\n                {/*    rowCount={itemCount}*/}\r\n                {/*    rowRenderer={props => {*/}\r\n                {/*        return React.cloneElement(children[props.index], {*/}\r\n                {/*            style: props.style*/}\r\n                {/*        });*/}\r\n                {/*    }}*/}\r\n                {/*    role={role}*/}\r\n                {/*/>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default ListboxComponent;","import React, {useEffect, useMemo, useState} from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n    setFilter,\r\n    setFilters,\r\n    selectFilters\r\n} from \"../../reducer/streamfilters\";\r\nimport { ActionCreators } from \"redux-undo\";\r\nimport {Autocomplete, createFilterOptions, Stack, TextField} from \"@mui/material\";\r\nimport {filterSearch} from \"../EventTable/fields\";\r\nimport {useDatabase} from \"../../Providers/Database\";\r\nimport ListboxComponent from \"../ListboxComponent\";\r\n\r\nconst OPTIONS_LIMIT = 50;\r\nconst defaultFilterOptions = createFilterOptions();\r\n\r\nconst filterOptionsFunc = (options, state) => {\r\n    return defaultFilterOptions(options, state).slice(0, OPTIONS_LIMIT);\r\n};\r\n\r\nexport default function FilterPanel() {\r\n    const filters = useSelector(selectFilters);\r\n    const dispatch = useDispatch();\r\n    const [filterOptions,setFilterOptions] = useState({});\r\n    const {isLoading,getDistinctField} = useDatabase();\r\n    // useEffect(()=>{\r\n    //     if (!Object.keys(filters).length) {\r\n    //         // const newfilters = {};\r\n    //         // filterSearch.forEach(f=>{\r\n    //         //     newfilters[f.accessorKey] = null;\r\n    //         // })\r\n    //         // dispatch(setFilters({value: newfilters}));\r\n    //         ActionCreators.clearHistory();\r\n    //     }\r\n    // },[]);\r\n    useEffect(()=>{\r\n        if (!(isLoading('rawData')||isLoading('countries')))\r\n        {\r\n            console.log('here')\r\n            const newOptions = {};\r\n            filterSearch.forEach(f=>{\r\n                newOptions[f.accessorKey] = getDistinctField(f.accessorKey);\r\n            });\r\n            setFilterOptions(newOptions);\r\n        }\r\n    },[isLoading('rawData'),isLoading('countries')])\r\n\r\n    return <Stack spacing={2} padding={2}>\r\n        {filterSearch.map(f=><Autocomplete\r\n            key={f.accessorKey}\r\n            multiple\r\n            size=\"small\"\r\n            limitTags={2}\r\n            filterOptions={filterOptionsFunc}\r\n            ListboxComponent={ListboxComponent}\r\n            options={filterOptions[f.accessorKey]??[]}\r\n            // getOptionLabel={(option) => option.title}\r\n            value={filters[f.accessorKey]??[]}\r\n            defaultValue={null}\r\n            onChange={(event, value) => {\r\n                dispatch(setFilter({key:f.accessorKey,value}));\r\n            }}\r\n            renderInput={(params) => (\r\n                <TextField\r\n                    {...params}\r\n                    label={f.header}\r\n                />\r\n            )}\r\n        />)}\r\n    </Stack>\r\n}","import React from 'react'\nimport {\n  AccountBox as AccountBoxIcon,\n  ChatBubble,\n  ChromeReaderMode,\n  Dashboard as DashboardIcon,\n  ExitToApp as ExitToAppIcon,\n  FilterList,\n  FormatTextdirectionRToL as RTLIcon,\n  FormatTextdirectionLToR as LTRIcon,\n  GetApp,\n  InfoOutlined,\n  Language as LanguageIcon,\n  Lock as LockIcon,\n  MenuOpen as MenuOpenIcon,\n  QuestionAnswer,\n  SettingsApplications as SettingsIcon,\n  Style as StyleIcon,\n  Tab,\n  ViewList,\n  Web,\n  FilterAlt,\n  Home as HomeIcon,\n    Map as MapIcon,\n    FileUpload\n} from '@mui/icons-material'\n\nimport allLocales from './locales'\nimport allThemes from './themes'\nimport FilterPanel from \"../components/FilterPanel\";\n\nconst getMenuItems = (props) => {\n  const {\n    intl,\n    updateLocale,\n    locale,\n    menuContext,\n    themeContext,\n    a2HSContext,\n    auth: authData,\n  } = props\n\n  const { toggleThis, isDesktop, isAuthMenuOpen, isMiniSwitchVisibility } =\n    menuContext\n  const { themeID, setThemeID, isRTL, toggleThisTheme } = themeContext\n\n  const { auth, setAuth } = authData\n  const { isAppInstallable, isAppInstalled, deferredPrompt } = a2HSContext\n\n  const localeItems = allLocales.map((l) => {\n    return {\n      value: undefined,\n      visible: true,\n      primaryText: intl.formatMessage({ id: l.locale }),\n      onClick: () => {\n        updateLocale(l.locale)\n      },\n      leftIcon: <LanguageIcon />,\n    }\n  })\n\n  const isAuthorised = auth.isAuthenticated\n\n  const themeItems = allThemes.map((t) => {\n    return {\n      value: undefined,\n      visible: true,\n      primaryText: intl.formatMessage({ id: t.id }),\n      onClick: () => {\n        setThemeID(t.id)\n      },\n      leftIcon: <StyleIcon style={{ color: t.color }} />,\n    }\n  })\n\n  // if (isAuthMenuOpen || !isAuthorised) {\n  //   return [\n  //     {\n  //       value: '/my_account',\n  //       primaryText: intl.formatMessage({\n  //         id: 'my_account',\n  //         defaultMessage: 'My Account',\n  //       }),\n  //       leftIcon: <AccountBoxIcon />,\n  //     },\n  //   ]\n  // }\n  return [\n    {\n      value: null,\n      onClick: () => {\n        deferredPrompt.prompt()\n      },\n      primaryText: intl.formatMessage({\n        id: 'filter',\n        defaultMessage: 'Filter',\n      }),\n      leftIcon: <FilterAlt />,\n      primaryTogglesNestedList: true,\n      nestedItems: [\n        {\n          primaryText: <FilterPanel/>\n        }\n      ]\n    },\n    {\n      value: '/',\n      visible: isAuthorised,\n      primaryText: intl.formatMessage({ id: 'home' }),\n      leftIcon: <HomeIcon />,\n    },\n    {\n      value: '/about',\n      visible: true,\n      primaryText: intl.formatMessage({ id: 'about' }),\n      leftIcon: <InfoOutlined />,\n    },\n    { divider: true },\n    {\n      primaryText: intl.formatMessage({ id: 'settings' }),\n      primaryTogglesNestedList: true,\n      leftIcon: <SettingsIcon />,\n      nestedItems: [\n        {\n          primaryText: intl.formatMessage({ id: 'theme' }),\n          secondaryText: intl.formatMessage({ id: themeID }),\n          primaryTogglesNestedList: true,\n          leftIcon: <StyleIcon />,\n          nestedItems: themeItems,\n        },\n        {\n          primaryText: intl.formatMessage({ id: 'language' }),\n          secondaryText: intl.formatMessage({ id: locale }),\n          primaryTogglesNestedList: true,\n          leftIcon: <LanguageIcon />,\n          nestedItems: localeItems,\n        },\n        {\n          visible: isDesktop ? true : false,\n          onClick: () => {\n            toggleThis('isMiniSwitchVisibility')\n          },\n          primaryText: intl.formatMessage({\n            id: 'menu_mini_mode',\n          }),\n          leftIcon: isMiniSwitchVisibility ? (\n            <MenuOpenIcon />\n          ) : (\n            <ChromeReaderMode />\n          ),\n        },\n        {\n          onClick: () => {\n            toggleThisTheme('isRTL')\n          },\n          primaryText: `${isRTL ? 'LTR' : 'RTL'} mode`,\n          leftIcon: isRTL ? <LTRIcon /> : <RTLIcon />,\n        },\n      ],\n    },\n    {\n      value: null,\n      visible: isAppInstallable && !isAppInstalled,\n      onClick: () => {\n        deferredPrompt.prompt()\n      },\n      primaryText: intl.formatMessage({\n        id: 'install',\n        defaultMessage: 'Install',\n      }),\n      leftIcon: <GetApp />,\n    },\n  ]\n}\nexport default getMenuItems\n","import React from 'react'\nimport Scrollbar from 'material-ui-shell/lib/components/Scrollbar/Scrollbar'\nimport SelectableMenuList from 'material-ui-shell/lib/containers/SelectableMenuList'\nimport { useAddToHomeScreen } from 'base-shell/lib/providers/AddToHomeScreen'\nimport { useAuth } from 'base-shell/lib/providers/Auth'\nimport { useConfig } from 'base-shell/lib/providers/Config'\nimport { useNavigate, useLocation } from 'react-router-dom'\nimport { useIntl } from 'react-intl'\nimport { useLocale } from 'base-shell/lib/providers/Locale'\nimport { useMenu } from 'material-ui-shell/lib/providers/Menu'\nimport { useTheme as useAppTheme } from 'material-ui-shell/lib/providers/Theme'\nimport getMenuItems from '../../config/menuItems'\nimport FilterPanel from \"../FilterPanel\";\n\nconst Menu = (props) => {\n  const intl = useIntl()\n  const navigate = useNavigate()\n  const location = useLocation()\n  const auth = useAuth()\n  const menuContext = useMenu()\n  const a2HSContext = useAddToHomeScreen()\n  const { toggleThis, isMiniMode, isMiniSwitchVisibility } = menuContext || {}\n  const { appConfig } = useConfig()\n  const { setLocale, locale = 'en' } = useLocale()\n  const themeContext = useAppTheme()\n\n  const menuItems = getMenuItems({\n    intl,\n    locale,\n    updateLocale: setLocale,\n    menuContext,\n    themeContext,\n    appConfig,\n    a2HSContext,\n    auth,\n    ...props,\n  }).filter((item) => {\n    return item.visible !== false\n  })\n\n  const index = location ? location.pathname : '/'\n\n  const handleChange = (event, index) => {\n    if (index !== undefined) {\n      toggleThis('isMobileMenuOpen', false)\n    }\n    if (index !== undefined && index !== Object(index)) {\n      navigate(index)\n    }\n  }\n\n  return (\n    <div\n      style={{\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        /*  direction: isRTL ? 'rtl' : 'ltr' */\n      }}\n    >\n      <Scrollbar style={{ flex: 1 }}>\n        {/*<FilterPanel/>*/}\n        <SelectableMenuList\n          key={isMiniSwitchVisibility + themeContext.isRTL}\n          onIndexChange={handleChange}\n          useMinified={isMiniMode}\n          items={menuItems}\n          index={index}\n        />\n      </Scrollbar>\n    </div>\n  )\n}\n\nexport default Menu\n"],"names":["fields","accessorKey","header","type","filterDisable","filterSearch","filter","f","React","props","ref","children","role","other","itemCount","Array","isArray","length","viewboxRef","useRef","ViewportList","viewportRef","items","count","Type","key","id","defaultFilterOptions","createFilterOptions","filterOptionsFunc","options","state","slice","FilterPanel","filters","useSelector","selectFilters","dispatch","useDispatch","useState","filterOptions","setFilterOptions","useDatabase","isLoading","getDistinctField","useEffect","console","log","newOptions","Stack","spacing","padding","Autocomplete","multiple","size","limitTags","ListboxComponent","value","defaultValue","onChange","event","setFilter","renderInput","params","TextField","label","intl","updateLocale","locale","menuContext","themeContext","a2HSContext","authData","auth","toggleThis","isDesktop","isMiniSwitchVisibility","isAuthMenuOpen","themeID","setThemeID","isRTL","toggleThisTheme","isAppInstallable","setAuth","isAppInstalled","deferredPrompt","localeItems","allLocales","l","undefined","visible","primaryText","formatMessage","onClick","leftIcon","Language","isAuthorised","isAuthenticated","themeItems","allThemes","t","Style","style","color","prompt","defaultMessage","FilterAlt","primaryTogglesNestedList","nestedItems","Home","InfoOutlined","divider","secondaryText","MenuOpen","ChromeReaderMode","GetApp","useIntl","navigate","useNavigate","location","useLocation","useAuth","useMenu","useAddToHomeScreen","isMiniMode","appConfig","useConfig","useLocale","setLocale","useAppTheme","menuItems","getMenuItems","item","index","pathname","display","flexDirection","height","flex","onIndexChange","Object","useMinified"],"sourceRoot":""}